nohup fastqc filename.fq  & for i in *fastq; 
do
i=${i%fastq*}; 
fastqc ${i}fastq
done

1.Hisat2

wget ftp://ftp.ccb.jhu.edu/pub/infphilo/hisat2/downloads/hisat2-2.1.0-Linux_x86_64.zip
unzip hisat2-2.1.0-Linux_x86_64.zip
echo 'export PATH=/home/yt/biotools/hisat2-2.1.0/bin:$PATH' >> ~/.bashrc

1.1
extract_exons.py Sus_scrofa.Sscrofa11.1.90.chr.gtf > genome.exon 
extract_splice_sites.py Sus_scrofa.Sscrofa11.1.90.chr.gtf > genome.ss
hisat2-build –ss genome.ss –exon genome.exon Sus_scrofa.Sscrofa11.1.dna.toplevel.fa Sus_tran 
hisat2 -p 8 –dta -x ./ref/Sus_tran/Sus_tran -1 ./fastq/Blast_1.clean.fq -2 ./fastq/Blast_2.clean.fq -S ./hisat2-out/Blast.sam 

1.2
建立索引
./extract_splice_sites.py /home/yt/Documents/数据/chrX_data/genes/chrX.gtf > /home/yt/Documents/数据/chrX_data/genes/chrX.ss
./extract_exons.py /home/yt/Documents/数据/chrX_data/genes/chrX.gtf > /home/yt/Documents/数据/chrX_data/genes/chrX.exon
hisat2-build --ss chrX.ss --exon chrX.exon chrX_data/genome/chrX.fa chrX_tran
进行批量比对
for i in {188044,188104,188234,188245,188257,188273,188337,188383,188401,188428,188454,204916};do hisat2 -p 4 -x chrX_data/indexes/chrX_tran \
-1 chrX_data/samples/ERR${i}_chrX_1.fastq.gz -2 chrX_data/samples/ERR${i}_chrX_2.fastq.gz \
-S ERR${i}_chrX.sam done

2.samtools && gffcompare
gffcompare：将基因和转录本与注释进行比较，并报告有关此比较的统计数据，确定组装的转录本是否完全或部分地匹配注释的基因，并计算出多少完全是新的

sudo apt install samtools 
wget http://ccb.jhu.edu/software/stringtie/dl/gffcompare-0.11.5.Linux_x86_64.tar.gz
tar -zxvf gffcompare-0.11.5.tar.gz
echo 'export PATH=/home/yt/biotools/gffcompare-0.11.5.Linux_x86_64:$PATH' >> ~/.bashrc

2.1:
sam文件转化成bam文件：
samtools view -bS /home/yt/Documents/数据/chrX_data/results/hisat2/ERR188044.sam > /home/yt/Documents/数据/chrX_data/results/stringtie/ERR188044.bam
排序：
samtools sort /home/yt/Documents/数据/chrX_data/results/stringtie/bam/ERR188044.bam /home/yt/Documents/数据/chrX_data/results/stringtie/bam/ERR188044.sort.bam
2.2:
samtools view -bS ./hisat2-out/Blast.sam > ./BAM/Blast.bam 
bam文件排序#因为是双端测序，必须对bam文件排序 
samtools sort -n ./BAM/Blast.bam ./BAM/Blast_sort.bam 
samtools view -h ./BAM/Blast_sort.bam > ./SAM/Blast_sort.sam 

htseq-count -s no ./SAM/Blast_sort.sam genes.gtf > ./reads count/Blast.count

for ((i=22;i<=23;i++));do samtools sort SRR53377${i}.bam -o SRR53377${i}.sorted_bam;done
#随后用featurecounts计数
for ((i=19;i<=23;i++));do featureCounts -T 5 -p -t exon -g gene_id  -a /mnt/d/biotech/chip/ref/gencode.vM10.annotation.gtf.gz -o ${i}.counts.txt SRR53377${i}_sorted.bam;done

3.StringTie 是用于 RNA-seq 的转录本组装和定量软件，StringTie 可以看做是cufflinks软件的升级版本，其功能和Cufflinks是一样的，
包括下面两个主要功能：转录本组装和定量；相比Cuffinks, 其运行速度更快。该软件的官网：https://ccb.jhu.edu/software/stringtie/index.shtml

wget http://ccb.jhu.edu/software/stringtie/dl/stringtie-2.0.4.Linux_x86_64.tar.gz
tar -zvxf stringtie-2.0.4.Linux_x86_64.tar.gz
echo 'export PATH=/home/yt/biotools/stringtie-2.0.4.Linux_x86_64:$PATH' >> ~/.bashrc

stringtie -p 8 -G /data/pub/youmengcheng/ymc/reference/Clostridium_papyrosolvens_dsm_2782_gca_000175795.ASM17579v2.50.gtf \
-o /data/pub/youmengcheng/ymc/cleandata/fq/c_12.gtf /data/pub/youmengcheng/ymc/cleandata/fq/c_12_sorted.bam

mkdir stringtiedata
mv *.gtf /data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata

cd /data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata
touch mergelist.txt
vi mergelist.txt
/data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/c_1.gtf
/data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/c_12.gtf
/data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/s_2.gtf
/data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/s_11.gtf

stringtie --merge -p 8 -G /data/pub/youmengcheng/ymc/reference/Clostridium_papyrosolvens_dsm_2782_gca_000175795.ASM17579v2.50.gtf \
-o /data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/stringtie_merged.gtf \
/data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/mergelist.txt

mkdir /data/pub/youmengcheng/ymc/cleandata/fq/ballgown
stringtie -e -B -p 8 -G /data/pub/youmengcheng/ymc/cleandata/fq/stringtiedata/stringtie_merged.gtf \
-o /data/pub/youmengcheng/ymc/cleandata/fq/ballgown/c_12/c_12.gtf /data/pub/youmengcheng/ymc/cleandata/fq/c_12_sorted.bam

prepDE.py -i /data/pub/youmengcheng/ymc/cleandata/fq/ballgown/
1.单样本转录本组装
3.1.1
进行拼接：会对每个bam文件生产一个gtf文件，主要记录i转录本的组装信息。
for i in {188044,188104,188234,188245,188257,188273,188337,188383,188401,188428,188454,204916};do stringtie -p 8 -G \
./genes/chrX.gtf -o ERR${i}_chrX.gtf -l ERR${i} ERR${i}_chrX.bam done

./stringtie --merge -G /home/yt/Documents/数据/chrX_data/genes/chrX.gtf -o /home/yt/Documents/数据/chrX_data/results/stringtie/stringtie_merged.gtf \
/home/yt/Documents/数据/chrX_data/results/stringtie/mergelist.txt

再次运行stringtie，组装转录本并估算基因表达丰度：
./stringtie -e -B -G /home/yt/Documents/数据/chrX_data/results/stringtie/stringtie_merged.gtf \
-o /home/yt/Documents/数据/chrX_data/results/ballgown/ballgown.ERR188383 /home/yt/Documents/数据/chrX_data/results/stringtie/bam/ERR188383.sort.bam
StringTie使用-B参数直接生成Ballgown的输入文件，Cufflinks的输出结果需要使用Tablemaker生成Ballgown的输入文件。
一个有5个输入文件，分别是：
e_data.ctab，外显子水平表达量；
i_data.ctab，内含子水平表达量；
t_data.ctab，转录本水平表达量；
e2t.ctab，外显子与转录本的对应关系；
i2t.ctab，内含子与转录本的对应关系。

setwd('/home/yt/Documents/数据/chrX_data')
pheno_data = read.csv("geuvadis_phenodata.csv")
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
bg_chrX = ballgown(dataDir = "/home/yt/Documents/数据/chrX_data/results/ballgown", samplePattern = "ERR", pData=pheno_data)
bg_chrX_filt = subset(bg_chrX,"rowVars(texpr(bg_chrX)) >1",genomesubset=TRUE)
results_transcripts = stattest(bg_chrX_filt,feature="transcript",covariate="sex",adjustvars = c("population"), getFC=TRUE, meas="FPKM")
results_genes = stattest(bg_chrX_filt, feature="gene", covariate="sex", adjustvars = c("population"), getFC=TRUE,meas="FPKM")
results_transcripts = data.frame(geneNames=ballgown::geneNames(bg_chrX_filt), geneIDs=ballgown::geneIDs(bg_chrX_filt), results_transcripts)
results_transcripts = arrange(results_transcripts,pval)
results_genes = arrange(results_genes,pval)
write.csv(results_transcripts, "chrX_transcript_results.csv", row.names=FALSE)
write.csv(results_genes, "chrX_gene_results.csv",row.names=FALSE)

subset(results_transcripts,results_transcripts$qval<0.05)

subset(results_genes,results_genes$qval<0.05)

数据可视化：
#按照p-value从小到大排序
> result_transcripts=arrange(result_transcripts,pval) 
> result_genes=arrange(result_genes,pval)
#把两个结果写入到csv文件中
> write.csv(result_transcripts, "chrX_transcript_results.csv",row.names=FALSE)
> write.csv(result_genes, "chrX_gene_results.csv",row.names=FALSE)
#从以上的输出中筛选出q值小于0.05的transcripts和genes，即性别间表达有差异的基因
> subset(result_transcripts,result_transcripts$qval<0.05)
> subset(result_genes,result_genes$qval<0.05)
#赋予调色板五个指定颜色
> tropical= c('darkorange', 'dodgerblue','hotpink', 'limegreen', 'yellow') 
> palette(tropical)
#以FPKM为参考值作图，以性别作为区分条件
> fpkm = texpr(bg_chrX,meas="FPKM")
#方便作图将其log转换，+1是为了避免出现log2(0)的情况
> fpkm = log2(fpkm+1)
>boxplot(fpkm,col=as.numeric(pheno_data$sex),las=2,ylab='log2(FPKM+1)')

#查看单个转录本在样品中的分布，如图，并绘制箱线图
> ballgown::transcriptNames(bg_chrX)[12] 
> ballgown::geneNames(bg_chrX)[12]
>plot(fpkm[12,] ~ pheno_data$sex, border=c(1,2), main=paste(ballgown::geneNames(bg_chrX)[12],' : ', ballgown::transcriptNames(bg_chrX)[12]),pch=19, xlab="Sex", ylab='log2(FPKM+1)')
>points(fpkm[12,] ~ jitter(as.numeric(pheno_data$sex)), col=as.numeric(pheno_data$sex))

# plotTranscripts函数可以根据指定基因的id画出在特定区段的转录本，可以通过sample函数指定看在某个样本中的表达情况，这里选用id=1750, sample=ERR188234
> plotTranscripts(ballgown::geneIDs(bg_chrX)[1750], bg_chrX, main=c('Gene MSTRG.575 in sample ERR188234'), sample=c('ERR188234'))

# 这里以id=575的基因为例（对应上一步作图）
> plotMeans('MSTRG.575', bg_chrX_filt,groupvar="sex",legend=FALSE)

3.1.2
gencode.mouse.annotation.gtf文件在/data/mouse_annotation/ 目录下：
单样本组装：
stringtie -p 8 -G /data/mouse_annotation/gencode.mouse.annotation.gtf -o cleandata/stringtiedata/CK-4.gtf cleandata/samtools_bam/CK-4_sort.bam
批量处理：
for i in CK-7 CK-8 HGJ-10 HGJ-6 HGJ-9;do stringtie -p 8 -G /data/mouse_annotation/gencode.mouse.annotation.gtf \
-o cleandata/stringtiedata/${i}.gtf cleandata/samtools_bam/${i}_sort.bam;done

查看输出结果：
ll -h cleandata/stringtiedata/

2.多样本转录本整合
将文件名的完整路径输入到一个文件中：
find /data/RNAseq/cleandata/stringtiedata/ -name *.gtf > /data/RNAseq/cleandata/stringtiedata/merglist.txt

查看一下merglist.txt文件中的内容：
cat /data/RNAseq/cleandata/stringtiedata/merglist.txt

stringtie --merge -p 8 -G /data/mouse_annotation/gencode.mouse.annotation.gtf -o cleandata/stringtiedata/stringtie_merged.gtf cleandata/stringtiedata/merglist.txt
#merglist.txt是自己创建的

3. 使用gffcompare检验数据比对到基因组上的情况(可选)
将前面我们整合的转录本文件检验数据比对到基因组上的情况
gffcompare -r /data/mouse_annotation/gencode.mouse.annotation.gtf -G cleandata/stringtiedata/stringtie_merged.gtf
其中gffcompare.annotated.gtf存储的是StringTie组装的转录本与注释文件内的转录本的差别信息，通过class_code来表示：
head cleandata/stringtiedata/gffcompare.annotated.gtf |grep  class_code | cut -d ";" -f 5-8

head cleandata/stringtiedata/gffcompare.annotated.gtf |grep  class_code | cut -d ";" -f 5-8 \

gffcmp.stats文件存储比对结果的准确性和预测率。
gffcompare -r /data/mouse_annotation/gencode.mouse.annotation.gtf -G cleandata/stringtiedata/stringtie_merged.gtf -o cleandata/stringtiedata/gffcompare
cat cleandata/stringtiedata/gffcompare.stats

4.重新组装转录本并估算基因表达丰度
利用merge得到的gtf重新对各个样本做定量，并创建ballgown可读取文件。
mkdir cleandata/ballgown
for i in CK-4 CK-7 CK-8 HGJ-10 HGJ-6 HGJ-9; do stringtie -e -B -p 8 -G cleandata/stringtiedata/stringtie_merged.gtf \
-o cleandata/ballgown/${i}/${i}.gtf cleandata/samtools_bam/${i}_sort.bam; done

在-B 指定的文件夹下生成特定的文件 
e2t.ctab e_data.ctab i2t.ctab i_data.ctab t_data.ctab 

e_data.ctab: 外显子水平表达值
i_data.ctab:内显子水平表达值
t_data.ctab:转录组水平表达值
e2t.ctab:表中有两列，e_id和t_id，表示哪些外显子属于哪些转录本。这些id与e_data和t_data表中的id匹配。
i2t.ctab:表中有两列，i_id和t_id，表示哪些内含子属于哪些转录本。这些id与i_data和t_data表中的id匹配。

5.read count数据输出
这里需要prepDE.py这个脚本。
prepDE.py -i cleandata/ballgown/
会在当前文件夹下产生2个csv文件。
这里得到的gene_count_matrix.csv数据就可以用于后续的下游分析了，比如差异表达分析。


Ballgown包
RSkittleBrewer（用于设置颜色）
genefilter（用于快速计算均值和方差）
dplyr（用于分类和排列结果）
devtools（用于再现性和安装包）

source("https://bioconductor.org/biocLite.R")　　　#Bioconductor软件库
biocLite(pkgs = c("ballgown"))　　      　
biocLite(pkgs = c("genefilter"))　　　　　　　 
biocLite(pkgs = c("RSkittleBrewer"))　　　　　　　
biocLite(pkgs = c("ggplot２"))　
biocLite(pkgs = c("devtools"))　
biocLite(pkgs = c("dplyr"))　

1. 安装
source("https://bioconductor.org/biocLite.R") 
biocLite("ballgown")
library(dplyr) 
install.packages("dplyr")
library(devtools)
install.packages("devtools")
library(genefilter)
source("https://bioconductor.org/biocLite.R") 
biocLite("genefilter")
library("RSkittleBrewer")
devtools::install_github('RSkittleBrewer', 'alyssafrazee')

#加载要用的语言包
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
getwd()
set()  # 修改当前路径至数据位置，加“”

read.csv("geuvadis_phenodata1.csv")      #读取表型数据，数据分组信息
pheno_data <- read.csv("geuvadis_phenodata1.csv")
bg_chrX = ballgown(dataDir = "C:/Users/Administrator/Documents/R/hisat2 stringtie ballgown/ballgown",samplePattern = "ERR", pData = pheno_data)
#dataDir 告知数据路径， samplePattern 依据样本的名字来， pData 指明数据关系，这里面的第一列样本必须和ballgown下面的文件名一样，否则会报错。

bg_chrX_filt = subset(bg_chrX, "rowVars(texpr(bg_chrX)) > 1", genomesubset = TRUE)
#滤掉低丰度的基因，这里选择过滤掉样本间差异少于一个转录本的数据

result_transcripts = stattest(bg_chrX_filt, feature = "transcript", covariate = "sex", adjustvars = c("population"), getFC = TRUE, meas = "FPKM")
result_transcripts   #确定组件有差异的转录本，在这里我们比较的性别之间的基因差异，
指定的分析参数是“transcripts”，主变量是“sex",修正变量是"population",getFC可以指定输出结果显示组间表达量的foldchange。

result_genes = stattest(bg_chrX_filt, feature = "gene", covariate = "sex", adjustvars = c("population"), getFC = TRUE, meas = "FPKM")
result_genes  #确定各组间有差异的基因
result_transcripts = data.frame(geneNames = ballgown::geneNames(bg_chrX_filt), geneIDs = ballgown::geneIDs(bg_chrX_filt), result_transcripts)
result_transcripts #为组间有差异的转录本添加基因名？？？？？不理解

result_transcripts = arrange(result_transcripts, pval)   #按照p-value值从小到大排序
result_genes = arrange(result_genes, pval)

write.csv(result_transcripts, "chrX_transcript_results.csv", row.names = FALSE)     #将两个结果写到csv文件中
write.csv(result_genes, "chrX_gene_results.csv", row.names = FALSE)

subset(result_transcripts, result_transcripts$qval < 0.05)        #从以上的输出中选出q值<0.05的转录本和基因，即性别表达有差异的基因
subset(result_genes, result_genes$qval < 0.05)
tropical = c('darkorange', 'dodgerblue', 'hotpink', 'limegreen', 'yellow')        #赋予调色板5个指定颜色
palette(tropical)
fpkm = texpr(bg_chrX, meas = "FPKM")     #以FPKM为参考值作图，以性别作为区分条件
fpkm = log2(fpkm + 1)         #方便作图，将其log转化，+1是为了别面出现log2(0)的情况
boxplot(fpkm, col = as.numeric(pheno_data$sex), las = 2, ylab = 'log2(FPKM + 1)')
#以上完整做出箱线图

#就单个转录本做箱线图
ballgown::transcriptNames(bg_chrX)[12]
ballgown::geneNames(bg_chrX)[12]

plot(fpkm[12,] ~ pheno_data$sex, border = c(1,2),main = paste(ballgown::geneNames(bg_chrX)[12],' : ',
ballgown::transcriptNames(bg_chrX)[12]), pch = 19, xlab = "Sex",ylab = 'log2(FPKM + 1)')

points(fpkm[12,] ~ jitter(as.numeric(pheno_data$sex)),col = as.numeric(pheno_data$sex))  
# 这一步作用是？？male做出来和原图有细微不同

#查看某一基因位置上所有转录本
# plotTranscripts函数可以根据指定基因的id画出在特定区段的转录本
# 可以通过sample函数指定看在某个样本中的表达情况，这里选用id=1750, sample=ERR188234
plotTranscripts(ballgown::geneIDs(bg_chrX)[1750], bg_chrX, main = c('Gene MSTRG.575 in sample ERR188234'), sample = c('ERR188234'))
#不成功？？？

#以性别为区分，查看表达情况
# 这里以id=575的基因为例（对应上一步作图）
plotMeans('MSTRG.575', bg_chrX_filt, groupvar = "sex", legend = FALSE)



