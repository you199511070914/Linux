一个真正意义上的全转录组，包括哪些内容呢？

编码RNA 
非编码RNA 
非编码大RNA：lncRNA和rRNA 
非编码小RNA：tRNA核酶
细胞器的RNA组分
小分子RNA：miRNA、piRNA、snRNA、snoRNA等等

软件列举
质控：fastqc ,multiqc , trimmomatic, cutadapt, trim-galore
比对：star , hisat2 , tophat , bowtie2 , bwa , subread
计数：htseq , bedtools, salmon, featurecount

github参考网址：https://github.com/twbattaglia/RNAseq-workflow


fastq-dump: 最常用的，讲SRA数据转换为fastq格；
prefetch: 下载sra数据
sam-dump: 将 SRA 转换为sam格式，如果原始数据是sam或bam，就需要使用这个工具
ascp和prefetch 

1： 下载SRA文件

1.1：prefetch下载数据
prefetch SRR1972917
prefetch下载的数据在home目录下的ncbi目录里。
~/ncbi/public/

1.2：aspera下载数据
wget http://download.asperasoft.com/download/sw/connect/3.7.4/aspera-connect-3.7.4.147727-linux-64.tar.gz
tar zxvf aspera-connect-3.7.4.147727-linux-64.tar.gz
bash aspera-connect-3.7.4.147727-linux-64.sh

# 查看是否有.aspera文件夹
cd # 去根目录
ls -a # 如果看到.aspera文件夹，代表安装成功
# 永久添加环境变量
echo 'export PATH=~/.aspera/connect/bin:$PATH' >> ~/.bashrc
source ~/.bashrc
# 查看帮助文档
ascp --help

SRA数据库下载：首先记住，数据的存放地址是ftp-private.ncbi.nlm.nih.gov，SRA在Aspera的用户名是anonftp，下载举例：
如果我想下载SRR949627.sra文件，首先我需要找到地址，去ncbi ftp-private或者ncbi faspftp，一层层寻找，直至找到，然后记下链接地址，就可以开始下载了：
注意：anonftp@ftp-private.ncbi.nlm.nih.gov后面是:号，不是路径/！
一般来说，NCBI的sra文件前面的地址都是一样的/sra/sra-instant/reads/ByRun/sra/SRR/...，那么写脚本批量下载也就不难了！

ascp -v -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh -k 1 -T -l200m 
anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByRun/sra/SRR/SRR949/SRR949627/SRR949627.sra 
~/biostar/aspera/


ENA数据库下载
ENA数据库下载：这里和上面不同，数据的存放地址是fasp.sra.ebi.ac.uk，ENA在Aspera的用户名是era-fasp，下载举例：
同样，我还是下载SRR949627，方便的是ENA中可以直接下载fastq.gz文件，不用再从sra文件慢吞吞的转换了，那么地址呢，可以去ENA搜索，再复制下fastq.gz文件的地址，
或者可以去ENA的ftp地址ftp.sra.ebi.ac.uk搜索，注意，是ftp，不是fasp！记下链接地址，就可以下载了
注意：era-fasp@fasp.sra.ebi.ac.uk后面是:号，不是路径/！
一般来说，EBI的sra文件前面的地址也都是一样的vol1/fastq/...，那么写脚本批量下载也就不难了！

ascp -QT -l 300m -P 33001 -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh era-fasp@fasp.sra.ebi.ac.uk:/vol1/fastq/SRR121/086/SRR12121586/SRR12121586_subreads.fastq.gz .

ascp -QT -l 300m -P 33001 -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh era-fasp@fasp.sra.ebi.ac.uk:/vol1/fastq/SRR949/SRR949627/SRR949627_1.fastq.gz 
~/biostar/aspera/

wget http://download.asperasoft.com/download/sw/connect/3.7.2/aspera-connect-3.7.2.141527-linux-64.sh
sh aspera-connect-3.7.2.141527-linux-64.sh
ascp -k 1 -l 100M -i ~/asperaweb_id_dsa.openssh -T anonftp@ftp.ncbi.nlm.nih.gov:sra/sra-instant/reads/ByStudy/sra/SRP/SRP040/SRP040251/SRR1197490/SRR1197490.sra .


2： SRA文件转换成fastq文件

#我们从NCBI等数据库下载的原始数据很多为SRA格式，需要转换成fastq文件。常用工具为：NCBI SRA Toolkit
fastq-dump --gzip --split-3 -O outputdir -A file1.sra
fastq-dump --gzip --split-3 SRR1972917.sra
fastq-dump --split-files SRR1972917

for I in seq 56 62
do
fastq-dump --gzip –split-3 -O ./fastq/ -A SRR35899${I}.sra
done

#--split-3：如果是双端测序数据，则输出两个文件，如果不是则只输出一个文件

3.1： fastqc对fastq文件进行质检

fastqc *.gz
fastqc -q -t 4 -o ./fastqc_result/ *.fastq.gz &
 
#Adapter content，接头含量：在此处可查看数据中使用接头信息
#具体接头查询地点：github-fastqc 或者：Download common Illumina adapters

3.2： multiqc可以对几个fastqc报告文件进行总结并汇总到一个报告文件中，以更直观到防止展示。

fastqc -t 16 -o ./ ./*.fq.gz
multiqc ./*zip -o ./

3.3：查看Q30
/data/pub/youmengcheng/ymc/biosoft/fqcheck -InFq1 C_1_R1_val_1.fq.gz -OutStat1 C_1_R1_val_1 -InFq2 C_1_R2_val_2.fq.gz -OutStat2 C_1_R2_val_2
后缀为C_1_R1_val_1.fqcheck,C_1_R2_val_2.fqcheck

readfq C_1_R1_val_1.fq.gz

4：数据过滤

4.1：Trimmomatic
根据FastQC质控报告，利用Trimmomatic软件处理数据。trimmomatic，是java软件，所以直接Google找到其官网，然后下载二进制版本解压即可使用！
#这个软件设计就是为了illumina的测序数据的，因为它自带的adaptor文件有限！一般只去除TruSeq Universal Adapter 这个接头，运行的时候，不报错才算是成功的！
#Paired End:
java -jar trimmomatic-0.35.jar PE -phred33 input_forward.fq.gz input_reverse.fq.gz 
output_forward_paired.fq.gz output_forward_unpaired.fq.gz 
output_reverse_paired.fq.gz output_reverse_unpaired.fq.gz 
ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 
LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 
## 所以只需要把参数放对位置即可！

4.2： trim_galore

cat ../SRR_Acc_List.txt | while read id
do
echo "trim_galore --length 35 --paired --retain_unpaired --cores 16 -o ./ ${id}_rm_1.fq.gz ${id}_rm_2.fq.gz"
done > trim.sh

trim_galore -output_dir clean --paired --length 75 --quality 25 --stringency 5 seq_1.fasq.gz seq_2.fastq.gz

trim_galore -q 25 --stringency 5 --dont_gzip --fastqc --retain_unpaired -r1 31 -r2 31 --length 30 -o ./ --paired   
--phred33 -a adaptor1 -a2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT *_R1.fastq.gz *_R2.fastq.gz
#其中adaptor1 为3'端引物，通常不同组织样有自己对应的引物，公司提供的word里面都附带的有，此处执行命令是需要在该序列前添加A，不然程序会提醒adaptor不完整 a2后面的其实是5'端引物的反向互补序列

trim_galore -q 20 --phred33 --stringency 3 --length 20 -e 0.1 \
--paired *_1.fq.gz *_2.fq.gz  \
--gzip -o /Users/yqWang/Local/wangyiqi/ZL1_VS_ZL3/ZL1_2/ZL1_2clean_data

trim_galore -q 25 --phred33 --stringency 3 --length 100 --paired PRNA202178TY_C_12_R1.fastq.gz PRNA202178TY_C_12_R2.fastq.gz --gzip -o /data/pub/youmengcheng/ymc/cleandata/
trim_galore --phred33 --quality 25 --length 100 --stringency 5 --paired --max_n 3 out.PRNA202178TY_C_12_R1.fastq out.PRNA202178TY_C_12_R2.fastq

观察到总read数减小和总体read的质量变高，小部分adapter也被去除。更具体过滤和trim_galore的数据处理情况可以在seq_trimming_report.txt中查看。

#在 UCSC 下载 hg19 参考基因组；
#从 gencode 数据库下载基因注释文件，并且用 IGV 去查看感兴趣的基因的结构，比如TP53,KRAS,EGFR 等等。
#截图几个基因的 IGV 可视化结构
#下载 ENSEMBL，NCBI 的 gtf，也导入 IGV 看看，截图基因结构

4.3：fastp

conda install fastp

单端：
fastp -i in.fq -o out.fq

双端：
fastp -l 100 -i in_1.fq -o out_1.fq -I in_2.fq -O out_2.fq

fastp -f 10 -F 10 --detect_adapter_for_pe -x -i R1.fq.gz -I R2.fq.gz -o R1.out.fq.gz -O R2.out.fq.gz

fastp -f 10 -F 10 --adapter_sequence AGATCGGAAGAGCACACGTCTGAAC --adapter_sequence_r2 AGATCGGAAGAGCGTCGTGTAGGGA -x \
-i PRNA202178TY_S11_R1.fastq -I PRNA202178TY_S11_R2.fastq \
-o S_11_R1.fastq -O S_11_R2.fastq

5： 把整理好的数据和参考基因组序列进行比对，寻找每个reads的最佳匹配位置。可以使用HISAT2，STAR等软件。

5.1： hisat2

5.1.0:hisat2去除rRNA

hisat2-build -p 4 rRNA.fasta rRNA
for i in {48..53}
do
a0="hisat2 -x ~/reference/linux/hisat2/otherRNA/rRNA "
a1="-1 SRR111783${i}_1.fastq.gz "
a2="-2 SRR111783${i}_2.fastq.gz "
a3="--un-conc-gz ../2.rrRNA/SRR111783${i}_rmr_%.fq.gz -p 16 -S ../2.rrRNA/SRR111783${i}.sam"
echo $a0$a1$a2$a3 
done > rmRNA.sh

nohup bash rmRNA.sh &

5.1.1：hisat2建立索引文件
hisat2-build –p 4 genome.fa genome
extract_exons.py Homo_sapiens.GRCh38.83.chr.gtf > genome.exon
extract_splice_sites.py Homo_sapiens.GRCh38.83.chr.gtf > genome.ss
extract_snps.py snp142Common.txt > genome.snp
hisat2-build -p 4 genome.fa --snp genome.snp --ss genome.ss --exon genome.exon genome_snp_tran

5.1.2：进行比对（单端比对以及双端比对）
hisat2 -p 16 -x ./grch38_tran/genome_tran -1 SRR534293_1.fastq -2 SRR534293_2.fastq –S SRR534293.sam
hisat2 -p 6 -x <dir of index of genome> -1 seq_val_1.fq.gz -2 seq_val_2.fq.gz -S tem.hisat2.sam
hisat2 -t -x /Users/yqWang/Local/wangyiqi/reference/index/hg38/genome -1 ZL1_2_1_val_1.fq.gz -2 ZL1_2_2_val_2.fq.gz -S ZL1_2.sam

hisat2 -t -p 10 -x /data/pub/youmengcheng/ymc/index/hisat2-index/cpap_ref -1 /data/pub/youmengcheng/ymc/cleandata/PRNA202178TY_S11_R1.fastq.gz \
-2 /data/pub/youmengcheng/ymc/cleandata/PRNA202178TY_S11_R2.fastq.gz \
-S /data/pub/youmengcheng/ymc/cpap/PRNA202178TY_S11.sam

5.2:STAR

conda安装
conda install -c bioconda star

5.2.1:建立索引
STAR --runThreadN 20 --runMode genomeGenerate \
--genomeDir /data/pub/youmengcheng/ymc/index/star-index/ \   #构建好的索引放在这个位置
--genomeFastaFiles /data/pub/youmengcheng/ymc/reference/GCF_000175795.2_ASM17579v2_genomic.fna \
--sjdbGTFfile /data/pub/youmengcheng/ymc/reference/GCF_000175795.2_ASM17579v2_genomic.gtf \
--sjdbOverhang 284   #我的测序数据长短不一，最长的是285bp

--runThreadN 是指构建是使用的线程数，在没有其他数据在跑的情况下，可以满线程跑
--runMode genomeGenerate 让STAR执行基因组索引的生成工作
--genomeDir 构建好的参考基因组存放的位置，最好是单独建立的一个文件夹
--genomeFastaFiles 参考基因组序列文件
--sjdbGTFfile 基因注释文件

fastq文件比对到基因组
比对定量部分
STAR --runThreadN 12    # 12线程
--genomeDir ~/reference/linux/STAR/STAR_GRCh38_genecode_v33/ref_genome.fa.star.idx/    # 参考基因组索引所在位置
--outSAMtype BAM SortedByCoordinate    # 输出经过坐标排序的BAM文件
--outReadsUnmapped Fastx   # 输出没能比对到基因组上的序列，格式与输入文件相同
--quantMode GeneCounts TranscriptomeSAM    # 输出基因的Read Count文件以及转录本定量的SAM文件
--readFilesCommand zcat    # 输入的fastq文件经过gzip压缩
--twopassMode Basic    # STAR特有，两次对比模式
--readFilesIn ${id}_1_val_1.fq.gz ${id}_2_val_2.fq.gz    # 输入文件的名称
--outFileNamePrefix ${id}    # 输出文件的前缀

可变剪切部分
## 以下参数设置来自ENCODE官方，有些解释很难翻译成中文，参见下图
--outFilterMultimapNmax 20    # 如果一个读段被多重比对超过20次，则认为这个读段不能被比对到基因组
--outFilterMismatchNmax 999    # 每对读段允许错配999个碱基（相当于不过滤）
--outFilterMismatchNoverReadLmax 0.04    # 每对读段允许出现读长*4%的碱基错配，即PE150允许2*150*0.04=12个碱基错配
--alignIntronMin 20    # 内含子最短是20个碱基
--alignIntronMax 1000000    # 内含子最长是1000000个碱基
--alignMatesGapMax 1000000    # 一对读段之间最长距离为1000000个碱基


## 以下参数设置来自ENCODE官方，有些解释很难翻译成中文，参见下图
--outFilterType BySJout    # 对junction进行过滤以减少错误
--alignSJoverhangMin 8    # 未注释过的junction的最少的overhang是8个碱基
--alignSJDBoverhangMin 1    # 注释过的junction的最少的overhang是1个碱基

## 其他参数
--alignSJstitchMismatchNmax 0 -1 0 0    # 允许剪切点错配的个数（-1代表无限制）四个数字分别代表(1)非经典；(2)GT/AG或CT/AC；(3)GC/AG或CT/GC(4)AT/AC或GT/AT

融合基因部分
--chimSegmentMin 20    # 每对嵌合读段较短的一端至少有20个碱基，即PE150允许280+20结构的融合基因
--chimOutJunctionFormat 1    # 输出的Chimeric.out.junction文件可直接用于融合基因
--chimSegmentReadGapMax 0    # 嵌合读段之间不允许空位
--chimJunctionOverhangMin 20    # 嵌合的junction的最少的overhang是20个碱基，为了过滤非常短的外显子，即连续剪切事件

STAR 
--runThreadN 20 \
--genomeDir /home/lyc/workspace4.21.20/data/ref \
--readFilesCommand gunzip -c \
--readFilesIn /home/lyc/workspace4.21.20/data/cleandata/N052611_Alb_1.fastq.gz /home/lyc/workspace4.21.20/data/cleandata/N052611_Alb_2.fastq.gz \
--outSAMtype BAM SortedByCoordinate \
--outFileNamePrefix N052611_Alb \

STAR --runThreadN 20 --readFilesIn /home/fanyc/RNA-seq/raw_data/SRR993723.sra_1.fastq /home/fanyc/RNA-seq/raw_data/SRR993723.sra_2.fastq 
--quantMode TranscriptomeSAM --outSAMtype BAM SortedByCoordinate --outFileNamePrefix /home/fanyc/RNA-seq/STAR/23 
--outFilterType BySJout --outFilterMultimapNmax 20 --alignSJoverhangMin 8 
--alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 --outFilterMismatchNoverLmax 0.04 
--alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --chimSegmentMin 20

STAR --genomeDir /data/pub/youmengcheng/ymc/index/star-index/ --runThreadN 10 
--readFilesIn PRNA202178TY_S_2_R1.fastq.gz PRNA202178TY_S_2_R2.fastq.gz 
--readFilesCommand zcat --outFileNamePrefix PRNA202178TY_S_2 --outSAMtype BAM SortedByCoordinate --outBAMsortingThreadN 8

–runThreadN 运行的线程数，根据自己的服务器合理选择
–genomeDir 构建的参考基因组位置
–readFilesCommand 对于gz压缩的文件，我们可以在后面添加 gunzip -c
–readFilesIn 输入文件的位置，对于双末端测序文件，用空格分隔开就行了
–outSAMtype 默认输出的是sam文件，我们这里的BAM SortedByCoordinate是让他输出为ban文件，并排序
–outFileNamePrefix 表示的是输出文件的位置和前缀

生成的文件：
Chimeric.out.junction  融合转录本
Aligned.sortedByCoord.out.bam  比对输出
Aligned.toTranscriptome.out.bam 转录本比对输出
SJ.out.tab 可变剪切结果输出

Aligned.out.sam或者Aligned.out.bam
它指的就是我们的比对结果
Log.progress.out
它是每分钟记录一次的对比情况
Log.out
它记录了STAR程序在运行中的各种情况，当我们的结果出现异常时，我们可以查看具体的运行情况，来查找错误
Log.final.out
它包含的是对比完以后的对比统计信息
SJ.out.tab
它包含了剪切的信息


6： samtools
samtools view -bS seq.sam > seq.bam  #文件格式转换
samtools sort seq.bam -o seq_sorted.bam  ##将bam文件排序
samtools index seq_sorted.bam  #对排序后对bam文件索引生成bai格式文件，用于快速随机处理。
samtools flagstate seq_sorted.bam > seq_sorted.flagstate

for i in `seq 1 1`
do
    samtools view -bS ZL1_2.sam > ZL1_2.bam
    samtools sort ZL1_1.bam -o ZL1_1_sorted.bam
    samtools index ZL1_1_sorted.bam
done

samtools sort C_12.bam C_12_sorted
samtools index PRNA202178TY_S_2_val_sorted.bam

6.2：bam & sam文件转fasta文件
samtools view input.bam | awk '{OFS="\t"; print ">"$1"\n"$10}' - > output.fasta
cat *.sam | awk '{print ">"$1"\n"$10}' > *.fasta

6.3：bam文件转成fastq文件
samtools sort -n input.bam -o input_sorted.bam  
bedtools bamtofastq -i input_sorted.bam -fq output_r1.fastq -fq2 output_r2.fastq

samtools sort -n SAMPLE.bam -o SAMPLE_sorted.bam
samtools fastq -@ 8 SAMPLE_sorted.bam \
    -1 SAMPLE_R1.fastq.gz \
    -2 SAMPLE_R2.fastq.gz \
    -0 /dev/null -s /dev/null -n

7：计数
7.1： htseq-count 是一款用于reads计数的软件，他能对位于基因组上的一些单位的reads数进行统计，这里所说的单位主要是指染色体上的一组位置区间（我们常见的就是gene exon）。

#htseq-count [options] <alignment_file> <gff_file>
#参考gtf文件可以是gencode或者是ensembl数据库的，但是尤其要注释chr的问题，而且版本问题，gtf/gff格式无所谓。比对后的文件一定要进行sort，推荐一定要sort -n，根据reads的name来sort
#-f sam/bam: 如果对bam文件进行counts，必须保证服务器的python安装了正确的pysam模块
#-r name/pos: 一般情况下我们的bam都是按照参考基因组的pos来sort的，但是这个软件默认却是reads的name，很坑，一般建议重新把bam文件sort一下，而不是选择 -r pos，因为-r pos实在是太消耗内存了。
#-s yes/no/reverse, 这也是巨坑的参数，默认是yes，一般人拿到的数据都是no，所以千万要注意！！！
#-t 选择gff/gtf文件的第3列，一般是exon，也可以是gene，transcript ，这个很少调整的。
#-i 这个需要修改，不然默认是ensembl的基因ID，一般人看不懂，可以改为gene_name，前提是你的gff文件里面有gene_name这个属性。

htseq-count -f bam -r pos /data/pub/youmengcheng/ymc/cpap/PRNA202178TY_S11_val_sorted.bam /data/pub/youmengcheng/ymc/reference/GCF_000175795.2_ASM17579v2_genomic.gtf 
> PRNA202178TY_S11_val.count.tab

7.2： feature counts计算RNA-seq测序reads对在基因组中对比对深度。
featureCounts -T 6 -p -t exon -g gene_id -a /data/pub/youmengcheng/ymc/reference/GCF_000175795.2_ASM17579v2_genomic.gtf \
-o PRNA202178TY_S11_val_sorted.txt /data/pub/youmengcheng/ymc/cpap/PRNA202178TY_S11_val_sorted.bam
# -g注释文件中提取对Meta-feature 默认是gene_id
# -t提取注释文件中的Meta-feature 默认是 exon
# -p参数是针对paired-end 数据
# -a输入GTF/GFF 注释文件
# -o输出文件

如果没有特别需求，STAR比对的时候就不要sort by coordinate了！！！sort一般都是为了建index

不同参数的比较：
featureCounts -p -Q 10 -s 0 -T $cpu -a $gtf-o $out_dir/${sName}.all.counts.txt $out_dir/${sName}.hg19Aligned.out.bam    #73.1%

featureCounts -p -Q 10 -M -s 0 -T $cpu -a $gtf -o $out_dir/${sName}.all.counts.txt2 $out_dir/${sName}.hg19Aligned.out.bam    #73.1%

featureCounts -p -Q 10 -B -s 0 -T $cpu -a $gtf -o $out_dir/${sName}.all.counts.txt3 $out_dir/${sName}.hg19Aligned.out.bam    #73.0%

featureCounts -p -Q 10 --ignoreDup -s 0 -T $cpu -a $gtf -o $out_dir/${sName}.all.counts.txt4 $out_dir/${sName}.hg19Aligned.out.bam    #73.1%

